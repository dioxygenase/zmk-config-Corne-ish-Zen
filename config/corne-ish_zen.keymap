/*
*
* Copyright (c) 2021 lowprokb.ca
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define QWE 0
#define SYM 1
#define NAV 2
#define NUM 3
#define MOU 4
#define FUN 5

&lt { quick_tap_ms = <200>; };

/ {
    chosen {
      zmk,matrix_transform = &five_column_transform;
    };

    combos {
        compatible = "zmk,combos";
        combo_tilde {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp TILDE>;
            layers = <0>;
        };
        combo_bslh {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp BSLH>;
            layers = <0>;
        };
        combo_lbkt {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp LBKT>;
            layers = <0>;
        };
        combo_plus {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp PLUS>;
            layers = <0>;
        };
        combo_at1 {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp AT>;
            layers = <0>;
        };
        combo_rbkt {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp RBKT>;
            layers = <0>;
        };
        combo_fslh {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp FSLH>;
            layers = <0>;
        };
        combo_caret {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp CARET>;
            layers = <0>;
        };
        combo_lessthan {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp LT>;
            layers = <0>;
        };
        combo_semi {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp SEMI>;
            layers = <0>;
        };
        combo_lpar {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LPAR>;
            layers = <0>;
        };
        combo_qmark {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp QMARK>;
            layers = <0>;
        };
        combo_excl {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp EXCL>;
            layers = <0>;
        };
        combo_rpar {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp RPAR>;
            layers = <0>;
        };
        combo_colon {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp COLON>;
            layers = <0>;
        };
        combo_greaterthan {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp GT>;
            layers = <0>;
        };
        combo_at2 {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp AT>;
            layers = <0>;
        };
        combo_hash {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp HASH>;
            layers = <0>;
        };
        combo_lbrc {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp LBRC>;
            layers = <0>;
        };
        combo_dllr {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp DLLR>;
            layers = <0>;
        };
        combo_pipe {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp PIPE>;
            layers = <0>;
        };
        combo_rbrc {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp RBRC>;
            layers = <0>;
        };
        combo_prcnt {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp PRCNT>;
            layers = <0>;
        };
        combo_grave {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp GRAVE>;
            layers = <0>;
        };

        combo_astrk {
            timeout-ms = <50>;
            key-positions = <1 2 3>;
            bindings = <&kp ASTRK>;
            layers = <0>;
        };
        combo_under {
            timeout-ms = <50>;
            key-positions = <6 7 8>;
            bindings = <&kp UNDER>;
            layers = <0>;
        };
        combo_equal {
            timeout-ms = <50>;
            key-positions = <11 12 13>;
            bindings = <&kp EQUAL>;
            layers = <0>;
        };
        combo_amps {
            timeout-ms = <50>;
            key-positions = <16 17 18>;
            bindings = <&kp AMPS>;
            layers = <0>;
        };
        combo_sqt {
            timeout-ms = <50>;
            key-positions = <21 22 23>;
            bindings = <&kp SQT>;
            layers = <0>;
        };
        combo_dqt {
            timeout-ms = <50>;
            key-positions = <26 27 28>;
            bindings = <&kp DQT>;
            layers = <0>;
        };
    };
    
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

                default_layer {
                        label = "QWE";


// -----------------------------------------------------------------------------------------
// |    |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |      |
// |    |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |      |
// |    |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |      |
//                  | DEL | BSP | SQT |   | TAB | SPC  | ENT |


                        bindings = <
&kp X      &kp F      &kp O      &kp U      &kp MINUS    &kp Q      &kp P         &kp L       &kp B      &kp Z
&hm LALT W &hm LGUI H &hm LCTL A &hm LSFT I &kp Y        &kp G      &hm RSFT T    &hm RCTL R  &hm RGUI S &hm RALT M
&kp J      &kp K      &kp COMMA  &kp DOT    &none        &none      &kp D         &kp N       &kp C      &kp V
                      &kp TAB    &lt NAV E  &kp BSPC     &lt NUM RET &lt NUM SPACE &lt FUN ESC
                        >;
                };



                sym_layer {
                        label = "SYM";
// -----------------------------------------------------------------------------------------
// |    |  {  |  }  |  (  |  )  |  "  |   |  -  |  &   |  |  |  \  |  /  |      |
// |    | GUI | ALT | CTR | SHI |  '  |   |  +  |  $   |  %  |  ^  |  *  |      |
// |    |  <  |  >  |  [  |  ]  |  `  |   |  =  |  !   |  @  |  #  |  ?  |      |
//                  |  :  |     |  ;  |   |  ~  |  _   |  .  |


                        bindings = <
&kp X      &kp F      &kp O      &kp U      &kp MINUS    &kp Q      &kp P         &kp L       &kp B      &kp Z
&hm LALT W &hm LGUI H &hm LCTL A &hm LSFT I &kp Y        &kp G      &hm RSFT T    &hm RCTL R  &hm RGUI S &hm RALT M
&kp J      &kp K      &kp COMMA  &kp DOT    &none        &none      &kp D         &kp N       &kp C      &kp V
                      &kp TAB    &lt NAV E  &kp BSPC     &lt NUM RET &lt NUM SPACE &lt FUN ESC
                        >;
                };

                nav_layer {
                        label = “NAV”;

// -----------------------------------------------------------------------------------------
// |    | BTCLR| BT1 | BT2 | BT3 | BT4 |   | Redo| Paste| copy|  cut| undo|      |
// |    | GUI  | ALT | CTR | SHI | BT5 |   | CAPS| left |dodwn|  up |right|      |
// |    |      |     |     |     |     |   |insrt| home |pg-DW|PG_UP| end |      |
//                   |     |     |     |   |  << | >|   | >>  |


                        bindings = < 
&kp X      &kp F      &kp O      &kp U      &kp MINUS    &kp Q      &kp P         &kp L       &kp B      &kp Z
&hm LALT W &hm LGUI H &hm LCTL A &hm LSFT I &kp Y        &kp G      &hm RSFT T    &hm RCTL R  &hm RGUI S &hm RALT M
&kp J      &kp K      &kp COMMA  &kp DOT    &none        &none      &kp D         &kp N       &kp C      &kp V
                      &kp TAB    &lt NAV E  &kp BSPC     &lt NUM RET &lt NUM SPACE &lt FUN ESC
                        >;
                };

                num_layer {
                        label = “NUM”;
// -----------------------------------------------------------------------------------------
// |    |  {  |  }  |  (  |  )  |  "  |   |  -  |  7   |  8  |  9  |  /  |      |
// |    | GUI | ALT | CTR | SHI |  '  |   |  +  |  4   |  5  |  6  |  *  |      |
// |    |  <  |  >  |  [  |  ]  |  `  |   |  =  |  1   |  2  |  3  |  ?  |      |
//                  |  :  |     |  ;  |   |  ~  |  0   |  .  |


                        bindings = <
&kp X      &kp F      &kp O      &kp U      &kp MINUS    &kp Q      &kp P         &kp L       &kp B      &kp Z
&hm LALT W &hm LGUI H &hm LCTL A &hm LSFT I &kp Y        &kp G      &hm RSFT T    &hm RCTL R  &hm RGUI S &hm RALT M
&kp J      &kp K      &kp COMMA  &kp DOT    &none        &none      &kp D         &kp N       &kp C      &kp V
                      &kp TAB    &lt NAV E  &kp BSPC     &lt NUM RET &lt NUM SPACE &lt FUN ESC

                        >;
                };

                mou_layer {
                        label = "MOU";
// -----------------------------------------------------------------------------------------
// |    |     |     |     |     |     |   |     |      |     |     |     |      |
// |    | GUI | ALT | CTR | SHI |     |   |     |      |     |     |     |      |
// |    |     |     |     |     |     |   |     |      |     |     |     |      |
//                  |     |     |     |   |     |      |     |

                        bindings = <
&kp X      &kp F      &kp O      &kp U      &kp MINUS    &kp Q      &kp P         &kp L       &kp B      &kp Z
&hm LALT W &hm LGUI H &hm LCTL A &hm LSFT I &kp Y        &kp G      &hm RSFT T    &hm RCTL R  &hm RGUI S &hm RALT M
&kp J      &kp K      &kp COMMA  &kp DOT    &none        &none      &kp D         &kp N       &kp C      &kp V
                      &kp TAB    &lt NAV E  &kp BSPC     &lt NUM RET &lt NUM SPACE &lt FUN ESC
                        >;
                };

                fun_layer {
                        label = "FUN";
// -----------------------------------------------------------------------------------------
// |    | F13 | F14 | F15 | F16 | F17 |   | PRTC | F07 | F08 | F09 | F12 |
// |    | GUI | ALT | CTR | SHI | F18 |   | CAPS | F04 | F05 | F06 | F11 |
// |    | F22 |RALT | F21 | F20 | F19 |   | PAUS | F01 | F02 | F03 | F10 |
//                  |     |     |     |   |      |     |     |
                        bindings = <
&kp X      &kp F      &kp O      &kp U      &kp MINUS    &kp Q      &kp P         &kp L       &kp B      &kp Z
&hm LALT W &hm LGUI H &hm LCTL A &hm LSFT I &kp Y        &kp G      &hm RSFT T    &hm RCTL R  &hm RGUI S &hm RALT M
&kp J      &kp K      &kp COMMA  &kp DOT    &none        &none      &kp D         &kp N       &kp C      &kp V
                      &kp TAB    &lt NAV E  &kp BSPC     &lt NUM RET &lt NUM SPACE &lt FUN ESC
                        >;
                };
    };
};

/*
*
* Copyright (c) 2021 lowprokb.ca
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define QWE 0
#define SYM 1
#define NAV 2
#define NUM 3
#define MOU 4
#define FUN 5

&lt { quick_tap_ms = <200>; };

/ {
    chosen {
      zmk,matrix_transform = &five_column_transform;
    };

    combos {
        compatible = "zmk,combos";
        combo_tilde {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp TILDE>;
            layers = <0>;
        };
        combo_bslh {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp BSLH>;
            layers = <0>;
        };
        combo_lbkt {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp LBKT>;
            layers = <0>;
        };
        combo_plus {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp PLUS>;
            layers = <0>;
        };
        combo_at1 {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp AT>;
            layers = <0>;
        };
        combo_rbkt {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp RBKT>;
            layers = <0>;
        };
        combo_fslh {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp FSLH>;
            layers = <0>;
        };
        combo_caret {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp CARET>;
            layers = <0>;
        };
        combo_lessthan {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp LT>;
            layers = <0>;
        };
        combo_semi {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp SEMI>;
            layers = <0>;
        };
        combo_lpar {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LPAR>;
            layers = <0>;
        };
        combo_qmark {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp QMARK>;
            layers = <0>;
        };
        combo_excl {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp EXCL>;
            layers = <0>;
        };
        combo_rpar {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp RPAR>;
            layers = <0>;
        };
        combo_colon {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp COLON>;
            layers = <0>;
        };
        combo_greaterthan {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp GT>;
            layers = <0>;
        };
        combo_at2 {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp AT>;
            layers = <0>;
        };
        combo_hash {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp HASH>;
            layers = <0>;
        };
        combo_lbrc {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp LBRC>;
            layers = <0>;
        };
        combo_dllr {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp DLLR>;
            layers = <0>;
        };
        combo_pipe {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp PIPE>;
            layers = <0>;
        };
        combo_rbrc {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp RBRC>;
            layers = <0>;
        };
        combo_prcnt {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp PRCNT>;
            layers = <0>;
        };
        combo_grave {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp GRAVE>;
            layers = <0>;
        };

        combo_astrk {
            timeout-ms = <50>;
            key-positions = <1 2 3>;
            bindings = <&kp ASTRK>;
            layers = <0>;
        };
        combo_under {
            timeout-ms = <50>;
            key-positions = <6 7 8>;
            bindings = <&kp UNDER>;
            layers = <0>;
        };
        combo_equal {
            timeout-ms = <50>;
            key-positions = <11 12 13>;
            bindings = <&kp EQUAL>;
            layers = <0>;
        };
        combo_amps {
            timeout-ms = <50>;
            key-positions = <16 17 18>;
            bindings = <&kp AMPS>;
            layers = <0>;
        };
        combo_sqt {
            timeout-ms = <50>;
            key-positions = <21 22 23>;
            bindings = <&kp SQT>;
            layers = <0>;
        };
        combo_dqt {
            timeout-ms = <50>;
            key-positions = <26 27 28>;
            bindings = <&kp DQT>;
            layers = <0>;
        };
    };
    
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWE";
            bindings = <
&kp X      &kp F      &kp O      &kp U      &kp MINUS    &kp Q      &kp P         &kp L       &kp B      &kp Z
&hm LALT W &hm LGUI H &hm LCTL A &hm LSFT I &kp Y        &kp G      &hm RSFT T    &hm RCTL R  &hm RGUI S &hm RALT M
&kp J      &kp K      &kp COMMA  &kp DOT    &none        &none      &kp D         &kp N       &kp C      &kp V
                      &kp TAB    &lt NAV E  &kp BSPC     &lt NUM RET &lt NUM SPACE &lt FUN ESC
            >;
        };

        nav_layer {
            label = "SYM";
            bindings = <
&none    &kp LC(A) &kp LC(C) &kp LC(V) &kp DEL          &none    &none     &none     &none     &none
&kp LALT &kp LGUI  &kp LCTL  &kp LSFT  &kp RET          &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &none
&none    &none     &none     &none     &kp LS(LG(C))    &kp HOME &kp PG_DN &kp PG_UP &kp END   &none
                   &none     &none     &none            &none   &none    &none
            >;
        };

        num_layer {
            label = "NAV";
            bindings = <
&none &kp N6 &kp N5 &kp N4 &none    &none &none    &none    &none    &none
&none &kp N3 &kp N2 &kp N1 &none    &none &kp RSFT &kp RCTL &kp RGUI &kp RALT
&none &kp N9 &kp N8 &kp N7 &none    &none &none    &none    &none    &none
             &none  &kp N0 &kp BSPC &none &none    &none
            >;
        };

        fun_layer {
            label = "NUM";
            bindings = <
&none &kp F6 &kp F5 &kp F4  &none    &none &kp F14 &kp F15 &kp F16 &none
&none &kp F3 &kp F2 &kp F1  &none    &none &kp F11 &kp F12 &kp F13 &none
&none &kp F9 &kp F8 &kp F7  &none    &none &kp F17 &kp F18 &kp F19 &none
             &none  &kp F10 &none    &none &none   &none
            >;
        };

        bt_layer {
            label = "MOU";
            bindings = <
&none      &none        &bt BT_SEL 4 &bt BT_SEL 3 &none     &none &none &none &none &none
&bt BT_CLR &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0 &none     &none &none &none &none &none
&none      &none        &bt BT_PRV   &bt BT_NXT   &none     &none &none &none &none &none
                        &none        &none        &none     &none &none &none
            >;
        };
        
 fun_layer {
            label = "FUN";
            bindings = <
&none      &none        &bt BT_SEL 4 &bt BT_SEL 3 &none     &none &none &none &none &none
&bt BT_CLR &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0 &none     &none &none &none &none &none
&none      &none        &bt BT_PRV   &bt BT_NXT   &none     &none &none &none &none &none
                        &none        &none        &none     &none &none &none
            >;
        };
    };
};
